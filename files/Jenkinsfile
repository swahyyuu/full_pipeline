Map modules = [:]
script {
  properties(
    [
      parameters([
        string(defaultValue: 'development', name: 'WORKSPACE', description: 'setting up workspace for terraform'),
        string(defaultValue: 'learning-cicd', name: 'SLACK', description: 'Slack Workspace'),
        string(defaultValue: 'conan736', name: 'dockerhub_user', description: 'Username of DockerHub Account')
      ])
    ]
  )
}

def path = "modules/app"

pipeline {
  agent any 
  tools {
    "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
  }

  environment {
    TF_HOME = tool('terraform')
    TP_LOG = "WARN"
    PATH = "$TF_HOME:$PATH"
    ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
    SECRET_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }

  triggers {
    cron('5 13 * * *')
  }

  stages{
    stage('Development Environment') {
      stages {
        stage('DockerBuild') {
          steps {
          dir('files/') {
            script {
              modules.slack = load "slack_notif.groovy"
              modules.slack.envDevStart()
              }
            sh "docker build -t ${params.dockerhub_user}/jenkins:3.1 ${path}"
            }
          }
        }
        stage('Archive Flask App') {
          steps {
            dir('files/') {
              sh "cat ${path}/app.py > ${path}/app.txt"
              archiveArtifacts allowEmptyArchive: true, artifacts: "${path}/app.txt", followSymlinks: false
            }
          }
        }
        stage('Docker Push the Image') {
          steps {
            dir('files/') {
              withCredentials([usernamePassword(credentialsId: 'DockerHub', passwordVariable: 'dockerHubPass', usernameVariable: 'dockerHubUser')]) {
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker push ${params.dockerhub_user}/jenkins:3.1"
              }
            }
          }
        }
        stage('Deploy on Dev Env') {
          steps {
            dir('files/') {
              script {
                try {
                  def run_dev
                  modules.function = load "deploy_container.groovy"
                  modules.function.deploy()
                } catch (err) {
                  modules.slack.notifyPipeline(currentBuild.result)
                }
                  modules.slack.envDevDeploy(currentBuild.result)              
              }
            }
          }
        }
        stage('Remove App on Dev Env') {
          steps {
            dir('files/') {
              sh "sleep 5"
              sh "docker rm -f flask_from_jenkins"
            }
          }
        }
      }
    }
    stage('Packer Build') {
      steps {
        dir('files/packer/') {
          sh """
            packer build \
            -var "aws_access_key=$ACCESS_KEY" \
            -var "aws_secret_key=$SECRET_KEY" \
            -var-file="variables.pkrvars.hcl" .
          """
        }
      }
    }
    stage('Production Environment') {
      stages {
        stage('TerraformInit') {
          steps {
            dir('files/') {
              script {
                modules.slack.envProdStart(currentBuild.result)
                try {
                withAWS(credentials:'AwsAccount') {
                  sh """
                    aws configure set region "ap-southeast-1"
                    chmod +x ./modules/bash_scripts/check_kms.sh
                    ./modules/bash_scripts/check_kms.sh
                  """
                } 
                } catch(err) {
                  sh "echo something_error"
                }
              }
              sh """
              terraform init -upgrade -input=false
              whoami
              """
            }
          }
        }
        stage('TerraformFormat') {
          steps {
            dir('files/') {
              sh "terraform fmt -list=true -write=false -diff=true -check=true"
            }
          }
        }

        stage('TerraformValidate') {
          steps {
            dir('files/') {
              sh "terraform validate"
            }
          }
        }

        stage('TerraformPlan') {
          steps {
            dir('files/') {
              script {
                try {
                  sh "terraform workspace new ${params.WORKSPACE}"
                } catch (err) {
                  sh "terraform workspace select ${params.WORKSPACE}"
                }               
                sh "terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' \
                -out terraform.tfplan;echo \$? > status"
                stash name: "terraform-plan", includes: "terraform.tfplan"
              }
            }
          }
        }

        stage('TerraformApply') {
          steps {
            script {
              def apply = false
              modules.slack.requireApproval()
              try {
                input message: 'Can you please confirm the apply', ok: 'Ready to apply the config of terraform'
                apply = true
              } catch (err) {
                apply = false 
                currentBuild.result = 'UNSTABLE'
              }
              if(apply) {
                dir('files/') {
                  unstash "terraform-plan"
                  try {
                    sh 'terraform apply terraform.tfplan'
                  } catch (err) {
                    sh "terraform destroy -auto-approve \
                    -var 'access_key=$ACCESS_KEY' \
                    -var 'secret_key=$SECRET_KEY'"
                  }
                }
              }
            }
          }
        }

        stage('TerraformDestroy') {
          steps {
            dir('files/') {
              sh "terraform destroy -auto-approve \
              -var 'access_key=$ACCESS_KEY' \
              -var 'secret_key=$SECRET_KEY'"
            }
          }
        }
        stage('Remove AMI Resource') {
          steps {
            dir('files/python/') {
              withPythonEnv('/usr/bin/python3') {
                withAWS(credentials:'AwsAccount') {
                  sh """
                  chmod +x ./check_library.sh
                  ./check_library.sh
                  python3 clean_resources.py
                  """
                }
              }
            }
          }
        }
        stage('Test AWS Environment') {
          steps {
            withAWS(credentials:'AwsAccount') {
              sh """
              export AWS_DEFAULT_REGION=ap-southeast-1
              aws configure set region "ap-southeast-1"
              aws kms list-aliases
              """
            }
          }
        }
      }
    }

  }

  post {
    always {
      script {
        if (currentBuild.result == 'SUCCESS') {
          modules.slack.notifyPipeline(currentBuild.result)
        } else {
          modules.slack.notifyPipeline(currentBuild.result)
        }
        cleanWs()
      }
    }
  }
}